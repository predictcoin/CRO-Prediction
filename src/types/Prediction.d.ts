/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PredictionInterface extends ethers.utils.Interface {
  functions: {
    "BNB()": FunctionFragment;
    "MAX_TREASURY_FEE()": FunctionFragment;
    "addTokens(address[])": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "betAmount()": FunctionFragment;
    "betSeconds()": FunctionFragment;
    "bufferSeconds()": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "claimTreasury()": FunctionFragment;
    "crp()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "endRound(address[],int256[])": FunctionFragment;
    "getRound(uint256)": FunctionFragment;
    "getStats(uint256)": FunctionFragment;
    "getTokens()": FunctionFragment;
    "getUserRounds(address,uint256,uint256)": FunctionFragment;
    "getUserRoundsLength(address)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "intervalSeconds()": FunctionFragment;
    "ledger(uint256,address)": FunctionFragment;
    "lostRound(address,uint256)": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "predictBear(uint256,address)": FunctionFragment;
    "predictBull(uint256,address)": FunctionFragment;
    "recoverToken(address,uint256)": FunctionFragment;
    "refundable(uint256,address)": FunctionFragment;
    "removeTokens(uint256[],address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBetAmount(uint256)": FunctionFragment;
    "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setTokenMaxBet(uint256)": FunctionFragment;
    "startRound(address[],int256[])": FunctionFragment;
    "tokenMaxBet()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAmount()": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userRounds(address,uint256)": FunctionFragment;
    "wonRound(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BNB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_TREASURY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addTokens", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "betAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "betSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bufferSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endRound",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserRounds",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "intervalSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ledger",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lostRound",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictBear",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "predictBull",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokens",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBetAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBufferBetAndIntervalSeconds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTokenMaxBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRound",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMaxBet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRounds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wonRound",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BNB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TREASURY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betSeconds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bufferSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intervalSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lostRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictBear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictBull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBufferBetAndIntervalSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMaxBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMaxBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userRounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wonRound", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "EndRound(uint256,uint256,int256)": EventFragment;
    "NewAdminAddress(address)": EventFragment;
    "NewBetAmount(uint256,uint256)": EventFragment;
    "NewBufferAndIntervalSeconds(uint256,uint256)": EventFragment;
    "NewOperatorAddress(address)": EventFragment;
    "NewOracle(address,address)": EventFragment;
    "NewOracleUpdateAllowance(uint256)": EventFragment;
    "NewTokenMaxBet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PredictBear(address,uint256,address,uint256)": EventFragment;
    "PredictBull(address,uint256,address,uint256)": EventFragment;
    "StartRound(uint256)": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokenRecovery(address,uint256)": EventFragment;
    "TokenRemoved(address)": EventFragment;
    "TreasuryClaim(uint256)": EventFragment;
    "Unpause(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdminAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBetAmount"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewBufferAndIntervalSeconds"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOperatorAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOracleUpdateAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTokenMaxBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictBear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictBull"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    epoch: BigNumber;
    amount: BigNumber;
  }
>;

export type EndRoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    epoch: BigNumber;
    roundId: BigNumber;
    price: BigNumber;
  }
>;

export type NewAdminAddressEvent = TypedEvent<[string] & { admin: string }>;

export type NewBetAmountEvent = TypedEvent<
  [BigNumber, BigNumber] & { epoch: BigNumber; betAmount: BigNumber }
>;

export type NewBufferAndIntervalSecondsEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    bufferSeconds: BigNumber;
    intervalSeconds: BigNumber;
  }
>;

export type NewOperatorAddressEvent = TypedEvent<
  [string] & { operator: string }
>;

export type NewOracleEvent = TypedEvent<
  [string, string] & { oracle: string; token: string }
>;

export type NewOracleUpdateAllowanceEvent = TypedEvent<
  [BigNumber] & { oracleUpdateAllowance: BigNumber }
>;

export type NewTokenMaxBetEvent = TypedEvent<
  [BigNumber] & { tokenMaxBet: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PauseEvent = TypedEvent<[BigNumber] & { epoch: BigNumber }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PredictBearEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    sender: string;
    epoch: BigNumber;
    token: string;
    amount: BigNumber;
  }
>;

export type PredictBullEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    sender: string;
    epoch: BigNumber;
    token: string;
    amount: BigNumber;
  }
>;

export type StartRoundEvent = TypedEvent<[BigNumber] & { epoch: BigNumber }>;

export type TokenAddedEvent = TypedEvent<[string] & { token: string }>;

export type TokenRecoveryEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type TokenRemovedEvent = TypedEvent<[string] & { token: string }>;

export type TreasuryClaimEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type UnpauseEvent = TypedEvent<[BigNumber] & { epoch: BigNumber }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class Prediction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PredictionInterface;

  functions: {
    BNB(overrides?: CallOverrides): Promise<[string]>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    betAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    betSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    bufferSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crp(overrides?: CallOverrides): Promise<[string]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    endRound(
      _tokens: string[],
      prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
        _tokens: string[];
        lockedPrices: BigNumber[];
        closePrices: BigNumber[];
        bets: BigNumber[];
      }
    >;

    getStats(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        _tokens: string[];
        bulls: BigNumber[];
        bears: BigNumber[];
      }
    >;

    getTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([number, string, BigNumber, boolean] & {
          position: number;
          token: string;
          amount: BigNumber;
          claimed: boolean;
        })[],
        BigNumber
      ]
    >;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _crp: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      _betAmount: BigNumberish,
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intervalSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, boolean] & {
        position: number;
        token: string;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    lostRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeTokens(
      _indexes: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
      }
    >;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBetAmount(
      _betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBufferBetAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMaxBet(
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startRound(
      _tokens: string[],
      prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenMaxBet(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wonRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  BNB(overrides?: CallOverrides): Promise<string>;

  MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  addTokens(
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  betAmount(overrides?: CallOverrides): Promise<BigNumber>;

  betSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    epochs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crp(overrides?: CallOverrides): Promise<string>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  endRound(
    _tokens: string[],
    prices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRound(
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string[],
      BigNumber[],
      BigNumber[],
      BigNumber[]
    ] & {
      epoch: BigNumber;
      lockedTimestamp: BigNumber;
      closeTimestamp: BigNumber;
      totalAmount: BigNumber;
      oraclesCalled: boolean;
      _tokens: string[];
      lockedPrices: BigNumber[];
      closePrices: BigNumber[];
      bets: BigNumber[];
    }
  >;

  getStats(
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[]] & {
      _tokens: string[];
      bulls: BigNumber[];
      bears: BigNumber[];
    }
  >;

  getTokens(overrides?: CallOverrides): Promise<string[]>;

  getUserRounds(
    user: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([number, string, BigNumber, boolean] & {
        position: number;
        token: string;
        amount: BigNumber;
        claimed: boolean;
      })[],
      BigNumber
    ]
  >;

  getUserRoundsLength(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _crp: string,
    _adminAddress: string,
    _operatorAddress: string,
    _intervalSeconds: BigNumberish,
    _bufferSeconds: BigNumberish,
    _betSeconds: BigNumberish,
    _betAmount: BigNumberish,
    _tokenMaxBet: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  ledger(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, boolean] & {
      position: number;
      token: string;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  lostRound(
    preder: string,
    round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  predictBear(
    epoch: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predictBull(
    epoch: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeTokens(
    _indexes: BigNumberish[],
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      epoch: BigNumber;
      lockedTimestamp: BigNumber;
      closeTimestamp: BigNumber;
      totalAmount: BigNumber;
      oraclesCalled: boolean;
    }
  >;

  setAdmin(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBetAmount(
    _betAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBufferBetAndIntervalSeconds(
    _bufferSeconds: BigNumberish,
    _intervalSeconds: BigNumberish,
    _betSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMaxBet(
    _tokenMaxBet: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startRound(
    _tokens: string[],
    prices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenMaxBet(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRounds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wonRound(
    preder: string,
    round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    BNB(overrides?: CallOverrides): Promise<string>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokens(_tokens: string[], overrides?: CallOverrides): Promise<void>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    betAmount(overrides?: CallOverrides): Promise<BigNumber>;

    betSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    claim(epochs: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    claimTreasury(overrides?: CallOverrides): Promise<void>;

    crp(overrides?: CallOverrides): Promise<string>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    endRound(
      _tokens: string[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
        _tokens: string[];
        lockedPrices: BigNumber[];
        closePrices: BigNumber[];
        bets: BigNumber[];
      }
    >;

    getStats(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        _tokens: string[];
        bulls: BigNumber[];
        bears: BigNumber[];
      }
    >;

    getTokens(overrides?: CallOverrides): Promise<string[]>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([number, string, BigNumber, boolean] & {
          position: number;
          token: string;
          amount: BigNumber;
          claimed: boolean;
        })[],
        BigNumber
      ]
    >;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _crp: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      _betAmount: BigNumberish,
      _tokenMaxBet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, boolean] & {
        position: number;
        token: string;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    lostRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeTokens(
      _indexes: BigNumberish[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
      }
    >;

    setAdmin(_adminAddress: string, overrides?: CallOverrides): Promise<void>;

    setBetAmount(
      _betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBufferBetAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMaxBet(
      _tokenMaxBet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startRound(
      _tokens: string[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenMaxBet(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wonRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "Claim(address,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; epoch: BigNumber; amount: BigNumber }
    >;

    Claim(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; epoch: BigNumber; amount: BigNumber }
    >;

    "EndRound(uint256,uint256,int256)"(
      epoch?: BigNumberish | null,
      roundId?: BigNumberish | null,
      price?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { epoch: BigNumber; roundId: BigNumber; price: BigNumber }
    >;

    EndRound(
      epoch?: BigNumberish | null,
      roundId?: BigNumberish | null,
      price?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { epoch: BigNumber; roundId: BigNumber; price: BigNumber }
    >;

    "NewAdminAddress(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    NewAdminAddress(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    "NewBetAmount(uint256,uint256)"(
      epoch?: BigNumberish | null,
      betAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; betAmount: BigNumber }
    >;

    NewBetAmount(
      epoch?: BigNumberish | null,
      betAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; betAmount: BigNumber }
    >;

    "NewBufferAndIntervalSeconds(uint256,uint256)"(
      bufferSeconds?: null,
      intervalSeconds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { bufferSeconds: BigNumber; intervalSeconds: BigNumber }
    >;

    NewBufferAndIntervalSeconds(
      bufferSeconds?: null,
      intervalSeconds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { bufferSeconds: BigNumber; intervalSeconds: BigNumber }
    >;

    "NewOperatorAddress(address)"(
      operator?: null
    ): TypedEventFilter<[string], { operator: string }>;

    NewOperatorAddress(
      operator?: null
    ): TypedEventFilter<[string], { operator: string }>;

    "NewOracle(address,address)"(
      oracle?: null,
      token?: null
    ): TypedEventFilter<[string, string], { oracle: string; token: string }>;

    NewOracle(
      oracle?: null,
      token?: null
    ): TypedEventFilter<[string, string], { oracle: string; token: string }>;

    "NewOracleUpdateAllowance(uint256)"(
      oracleUpdateAllowance?: null
    ): TypedEventFilter<[BigNumber], { oracleUpdateAllowance: BigNumber }>;

    NewOracleUpdateAllowance(
      oracleUpdateAllowance?: null
    ): TypedEventFilter<[BigNumber], { oracleUpdateAllowance: BigNumber }>;

    "NewTokenMaxBet(uint256)"(
      tokenMaxBet?: null
    ): TypedEventFilter<[BigNumber], { tokenMaxBet: BigNumber }>;

    NewTokenMaxBet(
      tokenMaxBet?: null
    ): TypedEventFilter<[BigNumber], { tokenMaxBet: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Pause(uint256)"(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    Pause(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PredictBear(address,uint256,address,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { sender: string; epoch: BigNumber; token: string; amount: BigNumber }
    >;

    PredictBear(
      sender?: string | null,
      epoch?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { sender: string; epoch: BigNumber; token: string; amount: BigNumber }
    >;

    "PredictBull(address,uint256,address,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { sender: string; epoch: BigNumber; token: string; amount: BigNumber }
    >;

    PredictBull(
      sender?: string | null,
      epoch?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { sender: string; epoch: BigNumber; token: string; amount: BigNumber }
    >;

    "StartRound(uint256)"(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    StartRound(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    "TokenAdded(address)"(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    TokenAdded(token?: null): TypedEventFilter<[string], { token: string }>;

    "TokenRecovery(address,uint256)"(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    TokenRecovery(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "TokenRemoved(address)"(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    TokenRemoved(token?: null): TypedEventFilter<[string], { token: string }>;

    "TreasuryClaim(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    TreasuryClaim(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "Unpause(uint256)"(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    Unpause(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    BNB(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    betAmount(overrides?: CallOverrides): Promise<BigNumber>;

    betSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crp(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    endRound(
      _tokens: string[],
      prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStats(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _crp: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      _betAmount: BigNumberish,
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lostRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTokens(
      _indexes: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBetAmount(
      _betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBufferBetAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMaxBet(
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startRound(
      _tokens: string[],
      prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenMaxBet(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wonRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bufferSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endRound(
      _tokens: string[],
      prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStats(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _crp: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      _betAmount: BigNumberish,
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intervalSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lostRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTokens(
      _indexes: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBetAmount(
      _betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBufferBetAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      _betSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMaxBet(
      _tokenMaxBet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startRound(
      _tokens: string[],
      prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenMaxBet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wonRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
